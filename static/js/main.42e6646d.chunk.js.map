{"version":3,"sources":["component/Clear.js","component/FaveCards.js","component/AnimeUser.js","component/AnimeCards.js","component/AnimePoster.js","component/Add.js","component/AddNewAnime.js","component/AnimeList.js","component/AnimeLink.js","App.js","serviceWorker.js","index.js"],"names":["Add","Clear","e","stopPropagation","console","log","props","handleClear","onClick","this","React","Component","FaveCards","Remove","handleRemove","title","type","onChange","handleCheckbox","AnimeUser","userList","tofaves","map","item","key","mal_id","img","image_url","Fave","includes","onFaveToggle","onFaveToggle1","className","filterDelete","AnimeCards","src","AddNewAnime","value","onChangeValue","addNewItem","disabled","Animelist","list","AnimeLink","to","path","render","listing","faves","App","handleFaveToggle","add","favorites","state","indexOf","push","setState","remove","animeIndex","splice","clear","newCheckedArray","checked","filter","elem","axios","method","url","then","res","data","anime","catch","err","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.42e6646d.chunk.js","sourcesContent":["import React from \"react\";\nexport default class Add extends React.Component {\n    Clear = e => {\n        e.stopPropagation();\n        console.log(\"click clear\");\n        this.props.handleClear();\n      };\n  render() {\n    return (\n\n      <div>\n          <button onClick={this.Clear}>Clear</button>\n         \n      </div>\n    );\n  }\n}","import React from \"react\";\nexport default class FaveCards extends React.Component {\n\n  Remove = e => {\n    e.stopPropagation();\n    console.log(\"click remove\");\n    this.props.handleRemove();\n  };\n\n   // Edit = e => {\n    //             e.stopPropagation();\n    //             console.log('On Text Change', );\n\n    //           };\n\n     \n  \n    //   Check = e => {\n    //     e.stopPropagation();\n    //     console.log(\"click check\");\n    //     this.props.handleCheckbox();\n    //   };\n   \n  render() {\n   \n    return (\n      <div>\n          <h1>{this.props.title}</h1>\n        <button onClick={this.Remove}>Remove</button>\n        {/* <button onClick={this.Edit}>Edit</button> */}\n{/* {this.props.item.checked?\"CHECKED\":\"NOT CHECKED\"} */}\n        <input  type=\"checkbox\" onChange={() => this.props.handleCheckbox()} />\n        <label>Label</label>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport AnimeCards from \"./AnimeCards\";\nimport Clear from \"./Clear\";\nimport Edit from \"./Edit\";\nimport FaveCards from \"./FaveCards\";\nexport default class AnimeUser extends React.Component {\n\n\n  render() {\n    const userList = this.props.tofaves.map(item => (\n      <div>\n        <FaveCards\n          key={item.mal_id}\n          title={item.title}\n          img={item.image_url}\n          Fave={this.props.tofaves.includes(item)}\n          onFaveToggle={() => this.props.onFaveToggle1(item)}\n          handleRemove={() => this.props.handleRemove(item)}\n                handleCheckbox={()=>this.props.handleCheckbox(item)}\n          // handleClear={() => this.props.handleClear(item)}\n          // addNewItem={() => this.props.addNewItem(item)}\n          // onChangeValue={() => this.props.onChangeValue(item)}\n        />\n        {/* <Remove handleRemove={() => this.props.handleRemove()} />\n        <Edit addNewItem={() => this.props.addNewItem()} />\n                  handleClear={()=>this.props.handleClear()}\n                //  chekedCheackBox{this.props.chcked}\n                />\n        */}\n      </div>\n    ));\n\n    return (\n      <div className=\"\">\n        <Clear handleClear={() => this.props.handleClear()} />\n        <button onClick={ this.props.filterDelete}  >delete</button>\n        {userList}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport AnimeAdd from \"./AnimeUser\";\nimport AnimePoster from \"./AnimePoster\";\n\nexport default class AnimeCards extends React.Component {\n  render() {\n    return (\n      <div className=\"grid-container\">\n        <div className=\"cards\">\n          <h2>{this.props.title}</h2>\n          <img src={this.props.img}/>\n         \n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nexport default class AnimePoster extends React.Component {\n  render() {\n    return (\n      <div>\n        <img src={this.props.image_url} alt={this.props.title} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nexport default class Add extends React.Component {\n    Add = e => {\n        e.stopPropagation();\n        console.log(\"click\");\n        this.props.onFaveToggle();\n      };\n  render() {\n    return (\n\n      <div>\n          <button onClick={this.Add}>Add to my page</button>\n      </div>\n    );\n  }\n}","import React from \"react\";\nexport default class AddNewAnime extends React.Component {\n  render() {\n      \n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={this.props.value}\n          onChange={this.onChangeValue}\n        />\n        <button\n          type=\"button\"\n          onClick={this.props.addNewItem}\n          disabled={this.props.value}\n        >\n          Add\n        </button>\n      </div>\n    );\n  }\n}\n\n//form for edit the title or the image for the anime\n//then i can do the add form\n","import React from \"react\";\nimport AnimeCards from \"./AnimeCards\";\nimport AnimeUser from \"./AnimeUser\";\nimport Add from \"./Add\";\nimport AddNewAnime from \"./AddNewAnime\";\n\nexport default class Animelist extends React.Component {\n  render() {\n    // let showAnime=[];\n    console.log(\"10 anime list:\", this.props.list);\n    const list = this.props.list.map(item => (\n      <div>\n        <AnimeCards\n          key={item.mal_id}\n          title={item.title}\n          img={item.image_url}\n          Fave={this.props.tofaves.includes(item)}\n          onFaveToggle={() => this.props.onFaveToggle1(item)}\n          addNewItem={() => this.props.addNewItem(item)}\n          onChangeValue={() => this.props.onChangeValue(item)}\n        />\n\n        <Add onFaveToggle={() => this.props.onFaveToggle1(item)} />\n      </div>\n    ));\n\n    return (\n      <div className=\"animeheader\">\n        <h1>Anime List</h1>\n        <AddNewAnime\n          addNewItem={() => this.props.addNewItem()}\n          onChangeValue={() => this.props.onChangeValue()}\n        />\n        <div className=\"anime\">{list}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport AnimeList from \"./AnimeList\";\nimport AnimeUser from \"./AnimeUser\";\nexport default class AnimeLink extends React.Component {\n  render() {\n    return (\n      <Router>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link className={\"animeButton\"} to=\"/animelist\">\n            Anime List\n          </Link>\n          <Link to=\"/animeuser\">Anime User</Link>\n        </nav>\n\n        <div>\n          <Route\n            path=\"/animelist\"\n            render={() => (\n              <AnimeList\n                list={this.props.listing}\n                tofaves={this.props.faves}\n                onFaveToggle1={this.props.onFaveToggle}\n                addNewItem={this.props.addNewItem}\n                onChangeValue={this.props.onChangeValue}\n              />\n            )}\n          />\n\n          <Route\n            path=\"/animeuser\"\n            render={() => (\n              <AnimeUser\n                list={this.props.listing}\n                tofaves={this.props.faves}\n                onFaveToggle1={this.props.onFaveToggle}\n                handleRemove={this.props.handleRemove}\n                handleClear={this.props.handleClear}\n                handleCheckbox={this.props.handleCheckbox}\n                filterDelete ={this.props.filterDelete} \n\n               \n              />\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n","import React from \"react\";\nimport AnimeLink from \"./component/AnimeLink\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      list: [],\n      favorites: [],\n      checked:[]\n    };\n  }\n\n  // function for the add a new fave IN THE LIST FOR THE USEr\n  handleFaveToggle = add => {\n    // ... is for push every time without exchange every time\n    const favorites = [...this.state.favorites];\n    const animeIndex = favorites.indexOf(add);\n\n    // condtion for check the array\n    if (animeIndex === -1) {\n      favorites.push(add);\n      console.log(`Adding ${add.title}from faves`);\n    }\n    this.setState({ favorites });\n  };\n\n  handleRemove = remove => {\n    console.log(remove)\n    const favorites = [...this.state.favorites];\n    const animeIndex = favorites[remove];\n\n    favorites.splice(animeIndex, 1);\n\n    this.setState({\n      favorites: favorites\n    });\n  };\n\n  handleClear = clear => {\n    // console.log(this.state.checked);\n    this.setState({\n      favorites: []\n    });\n  };\n\n  handleCheckbox = (title) => {\n    console.log(\"hi1\");\n    console.log(title.mal_id);\n    const newCheckedArray =[...this.state.checked, title.mal_id]\n\n    this.setState({\n      checked:newCheckedArray\n    });\n    console.log(this.state.checked);\n  };\n\n  filterDelete = e => {\n    e.favorites.filter(elem => {\n      return elem.checked !== true ? \"checked\" : \"notcheaked\";\n    });\n    console.log(this.state.favorites);\n  };\n\n  // onChangeValue = event => {\n  //   this.setState({\n  //     title: event.target.value\n  //   });\n  // };\n  // addNewItem = item => {\n  //   this.setState(state =>{\n  //     const list = state.list.push(state.title);\n  //     console.log(\"click\"+list)\n\n  //     return{\n  //       list,\n  //       title:\"\",\n  //     }\n  //   });\n\n  // };\n\n  // print one time before the render\n  // axios with use the components for the didMount to call before the render\n  componentDidMount() {\n    console.log(\"getAllPosts\");\n    axios({\n      method: \"get\",\n      url: \"https://api.jikan.moe/v3/season\"\n    })\n      .then(res => {\n        console.log(\"RESPONSE: \", res);\n        console.log(\"DATA: \", res.data.anime);\n        this.setState({ list: res.data.anime });\n      })\n      .catch(err => {\n        console.log(\"ERROR: \", err);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <AnimeLink\n          listing={this.state.list}\n          faves={this.state.favorites}\n          onFaveToggle={this.handleFaveToggle}\n          handleRemove={this.handleRemove}\n          handleClear={this.handleClear}\n          handleCheckbox={this.handleCheckbox}\n          addNewItem={this.addNewItem}\n          onChangeValue={this.onChangeValue}\n          filterDelete={this.filterDelete}\n        />\n        <hr />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}