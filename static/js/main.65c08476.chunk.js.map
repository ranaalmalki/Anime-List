{"version":3,"sources":["component/AnimeCards.js","component/Add.js","component/AnimeList.js","component/AddNewAnime.js","component/Clear.js","component/FaveCards.js","component/AnimeUser.js","component/AnimeLink.js","App.js","serviceWorker.js","index.js"],"names":["AnimeCards","className","this","props","title","src","img","React","Component","Add","e","stopPropagation","console","log","onFaveToggle","onClick","Animelist","list","map","item","key","mal_id","image_url","Fave","tofaves","includes","onFaveToggle1","Clear","handleClear","FaveCards","Remove","handleRemove","type","onChange","handleCheckbox","AnimeUser","userList","filterDelete","AnimeLink","to","path","render","listing","faves","addNewItem","onChangeValue","App","handleFaveToggle","add","favorites","state","animeIndex","indexOf","favAnimeObj","isChecked","push","setState","remove","splice","clear","filteredArr","filter","element","axios","method","url","then","res","data","anime","catch","err","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.65c08476.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class AnimeCards extends React.Component {\n  render() {\n    return (\n      <div className=\"grid-container\">\n        <div className=\"cards\">\n          <h2>{this.props.title}</h2>\n          <img src={this.props.img} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nexport default class Add extends React.Component {\n    Add = e => {\n        e.stopPropagation();\n        console.log(\"click\");\n        this.props.onFaveToggle();\n      };\n  render() {\n    return (\n\n      <div className=\"buttonAdd\">\n          <button onClick={this.Add}>Add to my page</button>\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport AnimeCards from \"./AnimeCards\";\nimport Add from \"./Add\";\nimport AddNewAnime from \"./AddNewAnime\";\n\nexport default class Animelist extends React.Component {\n  render() {\n    console.log(\"10 anime list:\", this.props.list);\n    const list = this.props.list.map(item => (\n      <div>\n        <AnimeCards\n          key={item.mal_id}\n          title={item.title}\n          img={item.image_url}\n          Fave={this.props.tofaves.includes(item)}\n          onFaveToggle={() => this.props.onFaveToggle1(item)}\n          // addNewItem={() => this.props.addNewItem(item)}\n          // onChangeValue={() => this.props.onChangeValue(item)}\n        />\n        <Add onFaveToggle={() => this.props.onFaveToggle1(item)} />\n      </div>\n    ));\n\n    return (\n      <div className=\"animeheader\">\n        <h1>Anime List</h1>\n        {/* <AddNewAnime\n          addNewItem={() => this.props.addNewItem()}\n          onChangeValue={() => this.props.onChangeValue()}\n        /> */}\n        <div className=\"anime\">{list}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nexport default class AddNewAnime extends React.Component {\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={this.props.value}\n          onChange={this.onChangeValue}\n        />\n        <button\n          type=\"button\"\n          onClick={this.props.addNewItem}\n          disabled={this.props.value}\n        >\n          Add\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nexport default class Add extends React.Component {\n  Clear = e => {\n    e.stopPropagation();\n    console.log(\"click clear\");\n    this.props.handleClear();\n  };\n  render() {\n    return (\n      <div>\n        <button className=\"buttonClear\" onClick={this.Clear}>\n          ClearAll\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nexport default class FaveCards extends React.Component {\n  Remove = e => {\n    e.stopPropagation();\n    console.log(\"click remove\");\n    this.props.handleRemove();\n  };\n\n  // Edit = e => {\n  //             e.stopPropagation();\n  //             console.log('On Text Change', );\n\n  //           };\n\n  render() {\n    return (\n      <div>\n        <div className=\"favecards\">\n          <h1>{this.props.title}</h1>\n          <img src={this.props.img} />\n        </div>\n        <button onClick={this.Remove}>Remove</button>\n        {/* <button onClick={this.Edit}>Edit</button> */}\n\n        <input\n          className=\"checkbox\"\n          type=\"checkbox\"\n          onChange={() => this.props.handleCheckbox()}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Clear from \"./Clear\";\nimport Edit from \"./Edit\";\nimport FaveCards from \"./FaveCards\";\nexport default class AnimeUser extends React.Component {\n  render() {\n    const userList = this.props.tofaves.map(item => (\n      <div>\n        <FaveCards\n          key={item.mal_id}\n          title={item.title}\n          img={item.image_url}\n          Fave={this.props.tofaves.includes(item)}\n          onFaveToggle={() => this.props.onFaveToggle1(item)}\n          handleRemove={() => this.props.handleRemove(item)}\n          handleCheckbox={() => this.props.handleCheckbox(item)}\n          // addNewItem={() => this.props.addNewItem(item)}\n          // onChangeValue={() => this.props.onChangeValue(item)}\n        />\n        {/* \n        <Edit addNewItem={() => this.props.addNewItem()} />\n             */}\n      </div>\n    ));\n\n    return (\n      <div className=\"\">\n        <Clear handleClear={() => this.props.handleClear()} />\n        <button className=\"buttonDelete\" onClick={this.props.filterDelete}>\n          Delete\n        </button>\n        {userList}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport AnimeList from \"./AnimeList\";\nimport AnimeUser from \"./AnimeUser\";\nexport default class AnimeLink extends React.Component {\n  render() {\n    return (\n      <Router>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/animelist\">Anime List</Link>\n          <Link to=\"/animeuser\">Anime User</Link>\n        </nav>\n\n        <div>\n          <Route\n            path=\"/animelist\"\n            render={() => (\n              <AnimeList\n                list={this.props.listing}\n                tofaves={this.props.faves}\n                onFaveToggle1={this.props.onFaveToggle}\n                addNewItem={this.props.addNewItem}\n                onChangeValue={this.props.onChangeValue}\n              />\n            )}\n          />\n\n          <Route\n            path=\"/animeuser\"\n            render={() => (\n              <AnimeUser\n                list={this.props.listing}\n                tofaves={this.props.faves}\n                onFaveToggle1={this.props.onFaveToggle}\n                handleRemove={this.props.handleRemove}\n                handleClear={this.props.handleClear}\n                handleCheckbox={this.props.handleCheckbox}\n                filterDelete={this.props.filterDelete}\n              />\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n","import React from \"react\";\nimport AnimeLink from \"./component/AnimeLink\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      list: [],\n      favorites: []\n    };\n  }\n\n  // function for  add a new anime in the user list\n  handleFaveToggle = add => {\n    // ... is for push every time without replace the item\n    const favorites = [...this.state.favorites];\n    const animeIndex = favorites.indexOf(add);\n\n    let favAnimeObj = add;\n    favAnimeObj.isChecked = false;\n    // applay the user click one time\n    if (animeIndex === -1) {\n      favorites.push(favAnimeObj);\n      console.log(`Adding ${add.title}from faves`);\n    }\n    //to allow add new item in the array favorites\n    this.setState({ favorites });\n  };\n\n  //function for remove one item in user page\n  handleRemove = remove => {\n    console.log(remove);\n    const favorites = [...this.state.favorites];\n    const animeIndex = favorites[remove];\n\n    favorites.splice(animeIndex, 1);\n\n    this.setState({\n      favorites: favorites\n    });\n  };\n\n  //clear all the item in the favorites array by one click :)\n  handleClear = clear => {\n    this.setState({\n      favorites: []\n    });\n  };\n\n  // to check if the user click the checkbox will return true\n  handleCheckbox = title => {\n    // change the status of is checked from the title object\n    title.isChecked = !title.isChecked;\n    // save the changes of the title object in the favorites array\n    console.log(title);\n  };\n\n  //when click the button delete will check if true will remove the item\n  filterDelete = () => {\n    console.log(this.state.favorites);\n    const filteredArr = this.state.favorites.filter(\n      element => !element.isChecked\n    );\n    this.setState({\n      favorites: filteredArr\n    });\n  };\n\n  // print one time before the render\n  // axios with use the components for the didMount to call before the render\n  componentDidMount() {\n    console.log(\"getAllPosts\");\n    axios({\n      method: \"get\",\n      url: \"https://api.jikan.moe/v3/season\"\n    })\n      .then(res => {\n        console.log(\"RESPONSE: \", res);\n        console.log(\"DATA: \", res.data.anime);\n        this.setState({ list: res.data.anime });\n      })\n      .catch(err => {\n        console.log(\"ERROR: \", err);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <AnimeLink\n          listing={this.state.list}\n          faves={this.state.favorites}\n          onFaveToggle={this.handleFaveToggle}\n          handleRemove={this.handleRemove}\n          handleClear={this.handleClear}\n          handleCheckbox={this.handleCheckbox}\n          addNewItem={this.addNewItem}\n          onChangeValue={this.onChangeValue}\n          filterDelete={this.filterDelete}\n        />\n        <hr />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}